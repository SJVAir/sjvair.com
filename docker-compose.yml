x-build-base: &build-base
  build:
    context: .
    target: base
  volumes:
    - .:/app
  env_file:
    - .env
  networks:
    - sjvair-net
  depends_on:
    db:
      condition: service_healthy
    queue:
      condition: service_healthy
    cache:
      condition: service_healthy

networks:
  sjvair-net:
    driver: bridge
    driver_opts:
      # Prevent HTTPS timeouts to Azure blob storage by lowering MTU below VPN/tunnel limit
      com.docker.network.driver.mtu: 1300

services:
  db:
    image: postgis/postgis:17-3.5
    container_name: sjvair
    environment:
      POSTGRES_DB: sjvair
      POSTGRES_USER: sjvair
      POSTGRES_PASSWORD: changeme
    networks:
      - sjvair-net
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sjvair"]
      interval: 5s
      timeout: 3s
      retries: 10

  queue:
    image: redis:8-alpine
    container_name: redis
    networks:
      - sjvair-net
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  cache:
    image: memcached:1.6-alpine
    container_name: memcached
    networks:
      - sjvair-net
    ports:
      - "11211:11211"
    healthcheck:
      test: ["CMD", "pidof", "memcached"]
      interval: 5s
      timeout: 3s
      retries: 5

  web:
    <<: *build-base
    build:
      context: .
      target: web
    command: python manage.py runserver 0:8000
    ports:
      - "8000:8000"
    profiles: ["all", "default", "web"]

  worker-primary:
    <<: *build-base
    command: python manage.py djangohuey --simple --queue primary
    profiles: ["all", "default", "workers"]

  worker-secondary:
    <<: *build-base
    command: python manage.py djangohuey --simple --queue secondary
    profiles: ["all", "workers"]

  test:
    <<: *build-base
    build:
      context: .
      target: test
    command: pytest
    env_file:
      - .env.test
    depends_on:
      db:
        condition: service_healthy
    profiles: ["test"]

volumes:
  pgdata:
